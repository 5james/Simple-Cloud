import hashlib
import os
import datetime


class DiffieHellman:
    # RFC3526
    # 6.  6144-bit MODP Group
    #    This group is assigned id 17.
    #    This prime is: 2^6144 - 2^6080 - 1 + 2^64 * { [2^6014 pi] + 929484 }
    #    Its hexadecimal value is:
    #    FFFFFFFF FFFFFFFF C90FDAA2 2168C234 C4C6628B 80DC1CD1 29024E08
    #    8A67CC74 020BBEA6 3B139B22 514A0879 8E3404DD EF9519B3 CD3A431B
    #    302B0A6D F25F1437 4FE1356D 6D51C245 E485B576 625E7EC6 F44C42E9
    #    A637ED6B 0BFF5CB6 F406B7ED EE386BFB 5A899FA5 AE9F2411 7C4B1FE6
    #    49286651 ECE45B3D C2007CB8 A163BF05 98DA4836 1C55D39A 69163FA8
    #    FD24CF5F 83655D23 DCA3AD96 1C62F356 208552BB 9ED52907 7096966D
    #    670C354E 4ABC9804 F1746C08 CA18217C 32905E46 2E36CE3B E39E772C
    #    180E8603 9B2783A2 EC07A28F B5C55DF0 6F4C52C9 DE2BCBF6 95581718
    #    3995497C EA956AE5 15D22618 98FA0510 15728E5A 8AAAC42D AD33170D
    #    04507A33 A85521AB DF1CBA64 ECFB8504 58DBEF0A 8AEA7157 5D060C7D
    #    B3970F85 A6E1E4C7 ABF5AE8C DB0933D7 1E8C94E0 4A25619D CEE3D226
    #    1AD2EE6B F12FFA06 D98A0864 D8760273 3EC86A64 521F2B18 177B200C
    #    BBE11757 7A615D6C 770988C0 BAD946E2 08E24FA0 74E5AB31 43DB5BFC
    #    E0FD108E 4B82D120 A9210801 1A723C12 A787E6D7 88719A10 BDBA5B26
    #    99C32718 6AF4E23C 1A946834 B6150BDA 2583E9CA 2AD44CE8 DBBBC2DB
    #    04DE8EF9 2E8EFC14 1FBECAA6 287C5947 4E6BC05D 99B2964F A090C3A2
    #    233BA186 515BE7ED 1F612970 CEE2D7AF B81BDD76 2170481C D0069127
    #    D5B05AA9 93B4EA98 8D8FDDC1 86FFB7DC 90A6C08F 4DF435C9 34028492
    #    36C3FAB4 D27C7026 C1D4DCB2 602646DE C9751E76 3DBA37BD F8FF9406
    #    AD9E530E E5DB382F 413001AE B06A53ED 9027D831 179727B0 865A8918
    #    DA3EDBEB CF9B14ED 44CE6CBA CED4BB1B DB7F1447 E6CC254B 33205151
    #    2BD7AF42 6FB8F401 378CD2BF 5983CA01 C64B92EC F032EA15 D1721D03
    #    F482D7CE 6E74FEF6 D55E702F 46980C82 B5A84031 900B1C9E 59E7C97F
    #    BEC7E8F3 23A97A7E 36CC88BE 0F1D45B7 FF585AC5 4BD407B2 2B4154AA
    #    CC8F6D7E BF48E1D8 14CC5ED2 0F8037E0 A79715EE F29BE328 06A1D58B
    #    B7C5DA76 F550AA3D 8A1FBFF0 EB19CCB1 A313D55C DA56C9EC 2EF29632
    #    387FE8D7 6E3C0468 043E8F66 3F4860EE 12BF2D5B 0B7474D6 E694F91E
    #    6DCC4024 FFFFFFFF FFFFFFFF
    #    The generator is: 2.
    __predefined_P = 0x
    __predefined_G = 2

    def __init__(self, prime_number=None, generator=None, key_length=2048):
        # start_timestamp = datetime.datetime.now()
        if prime_number is None:
            self.primeNumber = self.__predefined_P
        else:
            self.primeNumber = prime_number
        if generator is None:
            self.generator = self.__predefined_G
        else:
            self.generator = generator
        self.__generate_private_key(key_length)
        self.__generate_public_key()
        # end_timestamp = datetime.datetime.now()
        # timestamp = end_timestamp - start_timestamp
        # print('__init__ \t' + str(timestamp))

    def __generate_private_key(self, key_length=2048):
        # start_timestamp = datetime.datetime.now()
        self.privateKey = int.from_bytes(os.urandom(key_length), byteorder='big')
        # end_timestamp = datetime.datetime.now()
        # timestamp = end_timestamp - start_timestamp
        # print('priv \t' + str(timestamp))

    def __generate_public_key(self):
        # start_timestamp = datetime.datetime.now()
        self.publicKey = pow(self.generator, self.privateKey, self.primeNumber)
        # end_timestamp = datetime.datetime.now()
        # timestamp = end_timestamp - start_timestamp
        # print('pub \t' + str(timestamp))

    def generateKey(self, collaborator_key):
        # start_timestamp = datetime.datetime.now()
        _sharedSecret = pow(collaborator_key, self.privateKey, self.primeNumber)
        self.symmectricKey = hashlib.sha256(str(_sharedSecret).encode('utf-8')).digest()
        # end_timestamp = datetime.datetime.now()
        # timestamp = end_timestamp - start_timestamp
        # print('sym \t' + str(timestamp))


if __name__ == '__main__':

    alice = DiffieHellman()
    bob = DiffieHellman()

    alice.generateKey(bob.publicKey)
    bob.generateKey(alice.publicKey)

    if alice.symmectricKey == bob.symmectricKey:
        print("OK")
    else:
        print("keys does NOT match!")
